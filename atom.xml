<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Madhukar Hiranya]]></title>
  <link href="http://madhukarah.github.com/atom.xml" rel="self"/>
  <link href="http://madhukarah.github.com/"/>
  <updated>2012-06-27T15:33:39+05:30</updated>
  <id>http://madhukarah.github.com/</id>
  <author>
    <name><![CDATA[Madhukar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unlock iOS 5.1.1 Using Saved Activation Tickets]]></title>
    <link href="http://madhukarah.github.com/blog/2012/05/31/unlock-ios-5-dot-1-1-using-saved-activation-tickets/"/>
    <updated>2012-05-31T17:14:00+05:30</updated>
    <id>http://madhukarah.github.com/blog/2012/05/31/unlock-ios-5-dot-1-1-using-saved-activation-tickets</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Run Sublime Text 2 from Terminal]]></title>
    <link href="http://madhukarah.github.com/blog/2012/05/31/run-sublime-text-2-from-terminal/"/>
    <updated>2012-05-31T16:27:00+05:30</updated>
    <id>http://madhukarah.github.com/blog/2012/05/31/run-sublime-text-2-from-terminal</id>
    <content type="html"><![CDATA[<p>If you work in bash or love terminal, you can open up a file and folders right from command line.</p>

<p>Let&#8217;s start by running the Terminal app by writing,</p>

<pre><code>ln -s /Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
</code></pre>

<p>The above code will crfeate a symbolic link called Sublime.</p>

<p>Type,</p>

<pre><code>open ~/.bash_profile
</code></pre>

<p>Simply add/modify the following line and save.</p>

<pre><code>export PATH=/usr/local/bin:(...)
</code></pre>

<p>Reload using,</p>

<pre><code>source ~/.bash_profile
</code></pre>

<p>You&#8217;re Done. Time for some test.</p>

<pre><code>    sublime &lt;filename&gt;
</code></pre>

<h3>Arguments:</h3>

<p>–project : Load the given project</p>

<p>–command : Run the given command</p>

<p>-n or –new-window: Open a new window</p>

<p>-a or –add: Add folders to the current window</p>

<p>-w or –wait: Wait for the files to be closed before returning</p>

<p>-b or –background: Don’t activate the application</p>

<p>-s or –stay: Keep the application activated after closing the file</p>

<p>-h or –help: Show help (this message) and exit</p>

<p>-v or –version: Show version and exit</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Render Any Images in the Terminal]]></title>
    <link href="http://madhukarah.github.com/blog/2012/05/29/render-any-images-in-the-terminal/"/>
    <updated>2012-05-29T17:47:00+05:30</updated>
    <id>http://madhukarah.github.com/blog/2012/05/29/render-any-images-in-the-terminal</id>
    <content type="html"><![CDATA[<p>Picture-tube is a fun project which renders the image using ANSI terminal codes. You can run this project from command line using,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ npm install pictures-tube
</span><span class='line'>$ picture-tube http://something.com/something.png</span></code></pre></td></tr></table></div></figure>


<p>Find the source on <a href="https://github.com/substack/picture-tube">GitHub</a>.</p>
]]></content>
  </entry>
  
</feed>
